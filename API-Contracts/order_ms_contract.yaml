openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
paths:
  /v2/api/order/dev/healthcheck:
    get:
      summary: Get Health Check. This API Used in Orchestrator saga pattern.
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: |
                {
                   "status": 200,
                   "responseMessage": "Order server and Order DB is up and running"
                 }
  /v1/api/order:
    post:
      summary: >-
        Create Order and returns current state of order. This API Used in Choreography saga.
        pattern.
      description:  Create Order and returns current state of order. This API Used in Choreography saga.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/CreateOrderSchema'
              example: |
                  {
                      "userId": 1,
                      "productId": "4",
                      "price": 2,
                      "productQuantity": 1
                  }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/OrderDetails'
              example: |
                  {
                    "orderId": "123456789",
                    "userId": "987654321",
                    "orderStatus": "ORDER_DELIVERED",
                    "paymentStatus": "PAYMENT_DONE",
                    "orderFailReason": null,
                    "productId": "ABC123",
                    "quantity": 2,
                    "price": 2500,
                    "statusInfo": "Your order has been successfully delivered. Thank you for shopping with us!"
                  }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Response'
              example: |
                {
                  "status": 500,
                  "responseMessage": "Inventory Server Error."
                }
  
  /v2/api/order:
    post:
      summary: >-
        Create Order and returns current state of order. This API Used in Orchestrator saga.
        pattern.
      description:  Create Order and returns current state of order. This API Used in Orchestrator saga.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/CreateOrderSchema'
              example: |
                  {
                      "userId": 1,
                      "productId": "4",
                      "price": 2,
                      "productQuantity": 1
                  }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/OrderDetails'
              example: |
                  {
                    "orderId": "123456789",
                    "userId": "987654321",
                    "orderStatus": "ORDER_DELIVERED",
                    "paymentStatus": "PAYMENT_DONE",
                    "orderFailReason": null,
                    "productId": "ABC123",
                    "quantity": 2,
                    "price": 2500,
                    "statusInfo": "Your order has been successfully delivered. Thank you for shopping with us!"
                  }

        '500':
          description: Server error
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Response'
              example: |
                {
                  "status": 500,
                  "responseMessage": "Inventory Server Error."
                }
  /v2/api/order/{orderId}/status:
    put:
      summary: Update order status based on internal flows such as payment done or inventory reserved. This API is used for internal communication. This API Used in Orchestrator saga.
      parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                  $ref: '#/components/schemas/UpdateOrderStatusSchema'
              example: |
                {
                    "status": "PAYMENT_FAIL",
                    "orderFailReason": "Insufficient fund in wallet"
                }
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Response'
                example: |
                    {
                    "status": 200,
                    "responseMessage": "Order updated succesfully"
                    }
   
components:
  schemas:
    CreateOrderSchema:
      type: object
      properties:
        userId:
          type: string
        productId:
          type: string
        price:
          type: number
        productQuantity:
          type: integer
      required:
        - userId
        - productId
        - price
        - productQuantity
    UpdateOrderStatusSchema:
      type: object
      properties:
        status:
          type: string
          enum: [PAYMENT_FAIL, INVENTORY_INSUFFICIENT, INVENTORY_RESERVERVED, PAYMENT_DONE, REFUND_DONE]
        orderFailReason:
          type: string
      required:
        - status
        - orderFailReason
    Response:
      type: object
      properties:
        status:
          type: integer
        responseMessage:
          type: string
      required:
        - status
        - responseMessage

    OrderDetails:
      type: object
      properties:
        orderId:
          type: string
          description: The ID of the order.
        userId:
          type: string
          description: The ID of the user who placed the order.
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
          description: The status of the order.
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
          description: The payment status of the order.
        orderFailReason:
          type: string
          description: The reason for order failure, if any.
        productId:
          type: string
          description: The ID of the product in the order.
        quantity:
          type: integer
          format: int32
          description: The quantity of the product in the order.
        price:
          type: integer
          format: int64
          description: The price of the product in the order.
        statusInfo:
          type: string
          description: Additional status information about the order.

    OrderStatus:
      type: string
      enum: 
        - INITIATED
        - ORDER_PlACED
        - ORDER_DELIEVERED
        - ORDER_FAIL
      description: The status of the order.

    PaymentStatus:
      type: string
      enum: 
        - PAYMENT_INITIATED
        - PAYMENT_DONE
        - PAYMENT_FAILED
        - REFUND_INITIATED
        - REFUND_DONE
        - REFUND_FAILED
        - PAYMENT_FAIL_NO_AMOUNT_DEBIT
      description: The payment status of the order.